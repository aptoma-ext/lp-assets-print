.alf-grid {
    position: absolute;
    top: 0;
    left: 0;
    bottom: 0;
    right: 0;
    padding: 0;
}

@mixin grid($columns, $formatWidth, $columnWidth, $vertMargin, $horMargin) {
    $columnSpacing: ($formatWidth - (($columnWidth * $columns))) / ($columns - 1);

    [class*=alf-col-] {
        position: absolute;
        top: 0;
        left: 0;
        width: $columnWidth;
    }

    .alf-region.alf-col-bottom,
    .alf-col-bottom {
        margin-bottom: $vertMargin !important;
    }

    .alf-region.alf-col-top,
    .alf-col-top {
        margin-top: $vertMargin !important;
    }

    @for $i from 1 through $columns {
        $width: ($columnWidth * $i) + ($columnSpacing * ($i - 1));

        .alf-cols-#{$i} {
            width: $width;
        }

        .alf-col-#{$i} {
            left: ($columnWidth * ($i - 1)) + ($columnSpacing * ($i - 1));
        }

        .alf-colspan-#{$i} {
            width: $width;
        }

        .alf-overlay-colspan-#{$i} {
            z-index: 10000;
            width: $width;
        }
    }

    $start: $columns + 1;

    @for $i from $start through ($columns * 2) {
        $width: ($columnWidth * $i) + ($columnSpacing * ($i - 2));
        $outerWidth: $width + ($horMargin * 2);

        .alf-cols-#{$i} {
            width: $outerWidth;
        }

        .alf-col-#{$i} {
            left: ($horMargin * 2) + ($columnWidth * ($i - 1)) + ($columnSpacing * ($i - 2));
        }

        .alf-colspan-#{$i} {
            width: $width + ($horMargin * 2);
        }

        .alf-overlay-colspan-#{$i} {
            z-index: 10000;
            width: $width + ($horMargin * 2);
        }
    }
}
